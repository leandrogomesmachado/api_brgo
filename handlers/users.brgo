pacote handlers

importa (
	"database/sql"
	"net/http"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/user/api_brgo/models"
	"golang.org/x/crypto/bcrypt"
)

tipo UpdateUserRequest estrutura {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func GetAllUsers(db *sql.DB) gin.HandlerFunc {
	retorna func(c *gin.Context) {
		rows, err := db.Query("SELECT id, username, email, created_at, updated_at FROM users")
		se err != nulo {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "database error"})
			retorna
		}
		adia rows.Close()

		var users []models.User
		para rows.Next() {
			var user models.User
			se err := rows.Scan(&user.ID, &user.Username, &user.Email, &user.CreatedAt, &user.UpdatedAt); err != nulo {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "scan error"})
				retorna
			}
			users = anexa(users, user)
		}

		c.JSON(http.StatusOK, users)
	}
}

func GetUser(db *sql.DB) gin.HandlerFunc {
	retorna func(c *gin.Context) {
		id := c.Param("id")
		userID, err := strconv.ParseInt(id, 10, 64)
		se err != nulo {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid user id"})
			retorna
		}

		var user models.User
		err = db.QueryRow("SELECT id, username, email, created_at, updated_at FROM users WHERE id = ?", userID).
			Scan(&user.ID, &user.Username, &user.Email, &user.CreatedAt, &user.UpdatedAt)
		
		se err != nulo {
			se err == sql.ErrNoRows {
				c.JSON(http.StatusNotFound, gin.H{"error": "user not found"})
				retorna
			}
			c.JSON(http.StatusInternalServerError, gin.H{"error": "database error"})
			retorna
		}

		c.JSON(http.StatusOK, user)
	}
}

func UpdateUser(db *sql.DB) gin.HandlerFunc {
	retorna func(c *gin.Context) {
		id := c.Param("id")
		userID, err := strconv.ParseInt(id, 10, 64)
		se err != nulo {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid user id"})
			retorna
		}

		tokenUserID, exists := c.Get("user_id")
		se !exists || tokenUserID.(int64) != userID {
			c.JSON(http.StatusForbidden, gin.H{"error": "you can only update your own user"})
			retorna
		}

		var req UpdateUserRequest
		se err := c.ShouldBindJSON(&req); err != nulo {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			retorna
		}

		now := time.Now()
		tx, err := db.Begin()
		se err != nulo {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "transaction error"})
			retorna
		}

		se req.Email != "" {
			_, err = tx.Exec("UPDATE users SET email = ?, updated_at = ? WHERE id = ?", 
				req.Email, now, userID)
			se err != nulo {
				tx.Rollback()
				c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to update email"})
				retorna
			}
		}

		se req.Password != "" {
			hashedPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
			se err != nulo {
				tx.Rollback()
				c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to hash password"})
				retorna
			}
			
			_, err = tx.Exec("UPDATE users SET password = ?, updated_at = ? WHERE id = ?", 
				string(hashedPassword), now, userID)
			se err != nulo {
				tx.Rollback()
				c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to update password"})
				retorna
			}
		}

		se err := tx.Commit(); err != nulo {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "commit error"})
			retorna
		}

		c.JSON(http.StatusOK, gin.H{"message": "user updated successfully"})
	}
}

func DeleteUser(db *sql.DB) gin.HandlerFunc {
	retorna func(c *gin.Context) {
		id := c.Param("id")
		userID, err := strconv.ParseInt(id, 10, 64)
		se err != nulo {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid user id"})
			retorna
		}

		tokenUserID, exists := c.Get("user_id")
		se !exists || tokenUserID.(int64) != userID {
			c.JSON(http.StatusForbidden, gin.H{"error": "you can only delete your own user"})
			retorna
		}

		_, err = db.Exec("DELETE FROM users WHERE id = ?", userID)
		se err != nulo {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to delete user"})
			retorna
		}

		c.JSON(http.StatusOK, gin.H{"message": "user deleted successfully"})
	}
}
