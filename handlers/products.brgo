pacote handlers

importa (
	"database/sql"
	"net/http"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/user/api_brgo/models"
)

tipo ProductRequest estrutura {
	Name        string  `json:"name" binding:"required"`
	Description string  `json:"description" binding:"required"`
	Price       float64 `json:"price" binding:"required"`
	Stock       int     `json:"stock" binding:"required"`
}

func GetAllProducts(db *sql.DB) gin.HandlerFunc {
	retorna func(c *gin.Context) {
		rows, err := db.Query("SELECT id, name, description, price, stock, created_at, updated_at FROM products")
		se err != nulo {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "database error"})
			retorna
		}
		adia rows.Close()

		var products []models.Product
		para rows.Next() {
			var product models.Product
			se err := rows.Scan(&product.ID, &product.Name, &product.Description, &product.Price, 
				&product.Stock, &product.CreatedAt, &product.UpdatedAt); err != nulo {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "scan error"})
				retorna
			}
			products = anexa(products, product)
		}

		c.JSON(http.StatusOK, products)
	}
}

func GetProduct(db *sql.DB) gin.HandlerFunc {
	retorna func(c *gin.Context) {
		id := c.Param("id")
		productID, err := strconv.ParseInt(id, 10, 64)
		se err != nulo {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid product id"})
			retorna
		}

		var product models.Product
		err = db.QueryRow("SELECT id, name, description, price, stock, created_at, updated_at FROM products WHERE id = ?", productID).
			Scan(&product.ID, &product.Name, &product.Description, &product.Price, 
				&product.Stock, &product.CreatedAt, &product.UpdatedAt)
		
		se err != nulo {
			se err == sql.ErrNoRows {
				c.JSON(http.StatusNotFound, gin.H{"error": "product not found"})
				retorna
			}
			c.JSON(http.StatusInternalServerError, gin.H{"error": "database error"})
			retorna
		}

		c.JSON(http.StatusOK, product)
	}
}

func CreateProduct(db *sql.DB) gin.HandlerFunc {
	retorna func(c *gin.Context) {
		var req ProductRequest
		se err := c.ShouldBindJSON(&req); err != nulo {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			retorna
		}

		now := time.Now()
		result, err := db.Exec(
			"INSERT INTO products (name, description, price, stock, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?)",
			req.Name, req.Description, req.Price, req.Stock, now, now,
		)
		se err != nulo {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to create product"})
			retorna
		}

		id, err := result.LastInsertId()
		se err != nulo {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to get product id"})
			retorna
		}

		c.JSON(http.StatusCreated, gin.H{"id": id})
	}
}

func UpdateProduct(db *sql.DB) gin.HandlerFunc {
	retorna func(c *gin.Context) {
		id := c.Param("id")
		productID, err := strconv.ParseInt(id, 10, 64)
		se err != nulo {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid product id"})
			retorna
		}

		var req ProductRequest
		se err := c.ShouldBindJSON(&req); err != nulo {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			retorna
		}

		now := time.Now()
		_, err = db.Exec(
			"UPDATE products SET name = ?, description = ?, price = ?, stock = ?, updated_at = ? WHERE id = ?",
			req.Name, req.Description, req.Price, req.Stock, now, productID,
		)
		se err != nulo {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to update product"})
			retorna
		}

		c.JSON(http.StatusOK, gin.H{"message": "product updated successfully"})
	}
}

func DeleteProduct(db *sql.DB) gin.HandlerFunc {
	retorna func(c *gin.Context) {
		id := c.Param("id")
		productID, err := strconv.ParseInt(id, 10, 64)
		se err != nulo {
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid product id"})
			retorna
		}

		_, err = db.Exec("DELETE FROM products WHERE id = ?", productID)
		se err != nulo {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to delete product"})
			retorna
		}

		c.JSON(http.StatusOK, gin.H{"message": "product deleted successfully"})
	}
}
