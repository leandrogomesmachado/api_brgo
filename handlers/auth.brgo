pacote handlers

importa (
	"database/sql"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/user/api_brgo/middleware"
	"github.com/user/api_brgo/models"
	"golang.org/x/crypto/bcrypt"
)

tipo LoginRequest estrutura {
	Username string `json:"username" binding:"required"`
	Password string `json:"password" binding:"required"`
}

tipo RegisterRequest estrutura {
	Username string `json:"username" binding:"required"`
	Password string `json:"password" binding:"required"`
	Email    string `json:"email" binding:"required"`
}

func Login(db *sql.DB) gin.HandlerFunc {
	retorna func(c *gin.Context) {
		var req LoginRequest
		se err := c.ShouldBindJSON(&req); err != nulo {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			retorna
		}

		var user models.User
		var hashedPassword string
		err := db.QueryRow("SELECT id, password FROM users WHERE username = ?", req.Username).Scan(&user.ID, &hashedPassword)
		se err != nulo {
			se err == sql.ErrNoRows {
				c.JSON(http.StatusUnauthorized, gin.H{"error": "invalid credentials"})
				retorna
			}
			c.JSON(http.StatusInternalServerError, gin.H{"error": "database error"})
			retorna
		}

		err = bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(req.Password))
		se err != nulo {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "invalid credentials"})
			retorna
		}

		token, err := middleware.GenerateToken(user.ID)
		se err != nulo {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to generate token"})
			retorna
		}

		c.JSON(http.StatusOK, gin.H{"token": token})
	}
}

func Register(db *sql.DB) gin.HandlerFunc {
	retorna func(c *gin.Context) {
		var req RegisterRequest
		se err := c.ShouldBindJSON(&req); err != nulo {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			retorna
		}

		hashedPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
		se err != nulo {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to hash password"})
			retorna
		}

		now := time.Now()
		result, err := db.Exec(
			"INSERT INTO users (username, password, email, created_at, updated_at) VALUES (?, ?, ?, ?, ?)",
			req.Username, string(hashedPassword), req.Email, now, now,
		)
		se err != nulo {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to register user"})
			retorna
		}

		id, err := result.LastInsertId()
		se err != nulo {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to get user id"})
			retorna
		}

		token, err := middleware.GenerateToken(id)
		se err != nulo {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to generate token"})
			retorna
		}

		c.JSON(http.StatusCreated, gin.H{"id": id, "token": token})
	}
}
